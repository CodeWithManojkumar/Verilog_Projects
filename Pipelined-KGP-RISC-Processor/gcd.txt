// Finding GCD of Two Numbers
// R1 = first number also store it in data_memory[0]
// R2 = second number also store it in data_memory[1]
// Store the GCD in data_memory[2]

/* Instructions According to Processor */

ADDI R1, R0, #143;
ADDI R2, R0, #78;
ST   R1, 0(R0);
ST   R2, 1(R0);
BLT  R1,R2,#2;    // if R1<R2 (X) 
BGT  R1,R2,#4;    // if R1>R2 (Y)
BEQ  R1,R2,#6;    // if R1=R2 (Z)
SUB  R3, R2, R1;  // if R1<R2 (X)
MOVE R2, R3;
BR   #-6;                     
SUB  R3, R1, R2;  // if R1>R2 (Y)
MOVE R1, R3;
BR   #-9;                     
ST   R1, 2(R0);   // if R1=R2 (Z)
HLT;


/* W,X,Y,Z are the positions of Instructions */

/* Binary Code */

010000_00000_00001_0000000010001111
010000_00000_00010_0000000001001110
100010_00000_00001_0000000000000000
100010_00000_00010_0000000000000001
110000_00001_00010_0000000000000010
110001_00001_00010_0000000000000100
110010_00001_00010_0000000000000110
000000_00010_00001_00011_00000_000010
011010_00011_00010_0000000000000000
110100_11111111111111111111111010
000000_00001_00010_00011_00000_000010
011010_00011_00001_0000000000000000
110100_11111111111111111111110111
100010_00000_00001_0000000000000010
11111111111111111111111111111111

/* The Hex file is fetched in the testbench. gcd_test.v */