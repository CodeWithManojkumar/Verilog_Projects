// Sorting a set of 10 integers using bubble sort
// arr -> Array
// arr[0] address - 100
// arr[] = [20, 50, 10, 30, 70, 40, 60, 80, 100, 90];
// The Whole Array is loaded into Data Memory in the testbench.


/* Instructions According to Processor */

ADDI  R1, R0, #100;    // arr[0]
MOVE  R2, R0;          // i=0
MOVE  R3, R0;          // j=0
ADDI  R4, R0, #10;     // n=10
ADDI  R5, R0, #10;     // n-i for inner loop
MOVE  R6, R1;          // for iterating addr by i
MOVE  R7, R1;          // for iterating addr by j
SUBI  R4, R4, #1;
MOVE  R3, R0;          // outer_loop // j=0               (X)
SUBI  R5, R5, #1;      // decreasing size for inner_loop
ADD   R7, R0, R1;      // resetting addr itr j
LD    R8, 0(R7);       // inner_loop // arr[j]            (Z)
ADDI  R7, R7, #1;      // addr itr j += 1
LD    R9, 0(R7);       // arr[j+1]
ADDI  R3, R3, #1;      // j++
BLT   R8, R9, #3;      // if R8 < R9 then Branch          (Y)         
ST    R8, 0(R7);       // swap
ST    R9, -1(R7);
LD    R9, 0(R7);
BEQ   R3, R5, #1;      // Exiting from inner_loop         (W)(Y)
BR    #-10;            // Address to inner_loop           (Z)
ADDI  R2, R2, #1;      // After  Exiting From inner_loop  (W)
BNE   R2, R4, #-15;    // i!=n, go to outer loop          (X)          
NOP;
HLT;                                                      (EXIT)

/* Binary Code */

010000_00000_00001_0000000001100100
011010_00000_00010_0000000000000000
011010_00000_00011_0000000000000000
010000_00000_00100_0000000000001010
010000_00000_00101_0000000000001010
011010_00001_00110_0000000000000000
011010_00001_00111_0000000000000000
010001_00100_00100_0000000000000001
011010_00000_00011_0000000000000000
010001_00101_00101_0000000000000001
000000_00000_00001_00111_00000_000001
100001_00111_01000_0000000000000000
010000_00111_00111_0000000000000001
100001_00111_01001_0000000000000000
010000_00011_00011_0000000000000001
110000_01000_01001_0000000000000011
100010_00111_01000_0000000000000000
100010_00111_01001_1111111111111111
100001_00111_01001_0000000000000000
110010_00011_00101_0000000000000001
110100_11111111111111111111110110
010000_00010_00010_0000000000000001
110011_00010_00100_1111111111110001
11111111111111111111111111111110
11111111111111111111111111111111